name: Starfleet HR Complaint Poster

on:
  schedule:
    - cron: '0 */4 * * *'  # Every 4 hours
  workflow_dispatch:

jobs:
  post-complaint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Tweepy
        run: pip install tweepy

      - name: Post Starfleet HR Complaint
        env:
          CONSUMER_KEY: ${{ secrets.CONSUMER_KEY }}
          CONSUMER_SECRET: ${{ secrets.CONSUMER_SECRET }}
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          ACCESS_TOKEN_SECRET: ${{ secrets.ACCESS_TOKEN_SECRET }}
        run: |
          python - <<PY
          import tweepy
          import random
          from datetime import datetime, timedelta, timezone
          import os

          # === Load secrets (now available via step-level env) ===
          ck = os.getenv('CONSUMER_KEY')
          cs = os.getenv('CONSUMER_SECRET')
          at = os.getenv('ACCESS_TOKEN')
          ats = os.getenv('ACCESS_TOKEN_SECRET')

          missing = [k for k, v in [
              ('CONSUMER_KEY', ck), ('CONSUMER_SECRET', cs),
              ('ACCESS_TOKEN', at), ('ACCESS_TOKEN_SECRET', ats)
          ] if not v or not v.strip()]

          if missing:
              print(f"ERROR: Missing or empty secrets: {', '.join(missing)}")
              print("Check: Repo → Settings → Secrets and variables → Actions")
              exit(1)

          print("All secrets loaded successfully.")

          # === OAuth 1.0a Auth ===
          try:
              auth = tweepy.OAuth1UserHandler(ck, cs, at, ats)
              api = tweepy.API(auth)
              user = api.verify_credentials()
              print(f"Authenticated as @{user.screen_name}")
          except Exception as e:
              print(f"Auth failed: {e}")
              print("Double-check keys at https://developer.x.com")
              exit(1)

          # === Starfleet HR Complaints ===
          complaints = [
              "Anonymous: The replicator gave me decaf AGAIN.",
              "Anonymous: My phaser is set to 'stun' but it feels more like 'mild annoyance'.",
              "Anonymous: The holodeck keeps glitching and turning my vacation into a Klingon opera.",
              "Anonymous: Why does the turbolift always stop at every deck when I'm in a hurry?",
              "Anonymous: The ship's counselor is too empathetic; now I feel bad for complaining.",
              "Anonymous: Engineering won't fix the squeaky door in my quarters—claims it's 'ambient noise'.",
              "Anonymous: The food synthesizer only produces bland rations; where's the flavor variety?",
              "Anonymous: My communicator badge fell off during a red alert—embarrassing!",
              "Anonymous: The captain's logs are too dramatic; can we tone down the narration?",
              "Anonymous: Sickbay's hyposprays sting more than a Tribble bite.",
          ]

          # === Check last tweet (17-hour rule) ===
          should_post = True
          try:
              tweets = api.user_timeline(count=1, tweet_mode='extended')
              if tweets:
                  last_time = tweets[0].created_at.replace(tzinfo=timezone.utc)
                  hours_since = (datetime.now(timezone.utc) - last_time).total_seconds() / 3600
                  if hours_since < 17:
                      should_post = False
                      print(f"Last post {hours_since:.1f}h ago. Skipping.")
                  else:
                      print(f"Last post {hours_since:.1f}h ago. Ready to post!")
              else:
                  print("No prior tweets. First post incoming!")
          except Exception as e:
              print(f"Timeline check failed: {e}")
              print("Will post anyway (safe mode).")

          # === Post the complaint ===
          if should_post:
              complaint = random.choice(complaints)
              try:
                  api.update_status(complaint)
                  print(f"SUCCESS: Posted → {complaint}")
              except Exception as e:
                  print(f"Post failed: {e}")
          else:
              print("Post skipped due to timing.")
          PY
