name: Starfleet News Service

on:
  schedule:
    - cron: '0 */17 * * *'   # Every 17 hours UTC
  workflow_dispatch:       # Manual trigger

jobs:
  post-news:
    runs-on: ubuntu-latest
    steps:
      # -------------------------------------------------
      # 1. Generate Satirical Starfleet News Headline
      # -------------------------------------------------
      - name: Generate News Headline
        run: |
          # ---- Sci-Fi Libraries ----
          SPECIES=(
            "Klingon" "Romulan" "Ferengi" "Borg" "Cardassian" "Vulcan" "Andorian"
            "Betazoid" "Trill" "Gorn" "Orion" "Q Continuum" "Bajoran" "Talaxian"
          )
          NOUNS=(
            "asteroid mining scandal" "tribble containment breach" "warp core patent dispute"
            "dilithium smuggling ring" "holodeck addiction epidemic" "cloaking device recall"
            "replicator food fight" "transporter cloning incident" "phaser safety seminar"
            "subspace graffiti outbreak" "temporal loop protest" "neutrino burp anomaly"
            "sentient AI union strike" "plasma leak fashion trend" "quantum filament yoga retreat"
          )
          ORGANIZATIONS=(
            "Starfleet Command" "Klingon High Council" "Ferengi Commerce Authority"
            "Romulan Senate" "Borg Collective" "United Federation of Planets"
            "Section 31" "Daystrom Institute" "Starfleet Medical" "Admiralty Board"
          )
          ACTIONS=(
            "issues new guidelines" "denies involvement in" "announces emergency recall of"
            "launches investigation into" "condemns" "praises" "files injunction against"
            "offers reward for" "bans" "recommends immediate evacuation of"
          )
          PREFIXES=("BREAKING:" "URGENT:" "EXCLUSIVE:" "DEVELOPING:" "GALACTIC ALERT:" "STARFLEET BULLETIN:")

          # ---- Random Selection ----
          PREFIX=$(shuf -e "${PREFIXES[@]}" -n1)
          ORG=$(shuf -e "${ORGANIZATIONS[@]}" -n1)
          ACTION=$(shuf -e "${ACTIONS[@]}" -n1)
          SPECIES_OR_NOUN=$(shuf -e "${SPECIES[@]}" "${NOUNS[@]}" -n1)
          LOCATION_OR_ITEM=$(shuf -e "on Praxis" "in Sector 001" "aboard Deep Space Nine" \
            "at Starbase 74" "on Risa" "in the Neutral Zone" "via subspace relay" \
            "during shore leave" "in the Delta Quadrant" "at Quark's Bar" -n1)

          # ---- Build Headline ----
          if [[ " ${SPECIES[@]} " =~ " $SPECIES_OR_NOUN " ]]; then
            TEXT="$PREFIX $ORG $ACTION $SPECIES_OR_NOUN involvement $LOCATION_OR_ITEM."
          else
            TEXT="$PREFIX $ORG $ACTION $SPECIES_OR_NOUN $LOCATION_OR_ITEM."
          fi

          echo "Generated News:"
          echo "$TEXT"
          echo "NEWS_TEXT<<EOF" >> $GITHUB_ENV
          echo "$TEXT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      # -------------------------------------------------
      # 2. Post to X/Twitter via OAuth 1.0a
      # -------------------------------------------------
      - name: Broadcast News
        env:
          API_KEY: ${{ secrets.TWITTER_API_KEY }}
          API_SECRET: ${{ secrets.TWITTER_API_SECRET }}
          ACCESS_TOKEN: ${{ secrets.TWITTER_ACCESS_TOKEN }}
          ACCESS_TOKEN_SECRET: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}
        run: |
          # URL-encode credentials
          CONSUMER_KEY=$(printf %s "$API_KEY" | jq -sRr @uri)
          CONSUMER_SECRET=$(printf %s "$API_SECRET" | jq -sRr @uri)
          TOKEN=$(printf %s "$ACCESS_TOKEN" | jq -sRr @uri)
          TOKEN_SECRET=$(printf %s "$ACCESS_TOKEN_SECRET" | jq -sRr @uri)

          # OAuth 1.0a signature
          NONCE=$(openssl rand -hex 16)
          TIMESTAMP=$(date +%s)
          SIG_BASE="POST&https%3A%2F%2Fapi.twitter.com%2F2%2Ftweets&oauth_consumer_key%3D$CONSUMER_KEY%26oauth_nonce%3D$NONCE%26oauth_signature_method%3DHMAC-SHA1%26oauth_timestamp%3D$TIMESTAMP%26oauth_token%3D$TOKEN%26oauth_version%3D1.0"
          SIG_KEY="$CONSUMER_SECRET&$TOKEN_SECRET"
          SIGNATURE=$(echo -n "$SIG_BASE" | openssl dgst -sha1 -hmac "$SIG_KEY" -binary | openssl base64 | jq -sRr @uri)

          AUTH_HEADER="OAuth oauth_consumer_key=\"$CONSUMER_KEY\", oauth_nonce=\"$NONCE\", oauth_signature=\"$SIGNATURE\", oauth_signature_method=\"HMAC-SHA1\", oauth_timestamp=\"$TIMESTAMP\", oauth_token=\"$TOKEN\", oauth_version=\"1.0\""

          # Post tweet
          RESPONSE=$(curl -s -X POST "https://api.twitter.com/2/tweets" \
            -H "Authorization: $AUTH_HEADER" \
            -H "Content-Type: application/json" \
            -d "{\"text\": \"$NEWS_TEXT\"}")

          echo "API Response: $RESPONSE"
          if echo "$RESPONSE" | grep -q '"id"'; then
            ID=$(echo "$RESPONSE" | jq -r '.data.id')
            echo "News transmitted across the quadrant! https://x.com/i/status/$ID"
          else
            echo "Broadcast failed."
            echo "$RESPONSE"
            exit 1
          fi
