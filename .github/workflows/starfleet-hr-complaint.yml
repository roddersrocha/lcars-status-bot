name: Starfleet HR Complaint

on:
  schedule:
    - cron: '0 */4 * * *'     # Every 4 hours
  workflow_dispatch:

jobs:
  post:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Tweepy
        run: pip install tweepy

      - name: Create & Run Script
        env:
          CONSUMER_KEY: ${{ secrets.CONSUMER_KEY }}
          CONSUMER_SECRET: ${{ secrets.CONSUMER_SECRET }}
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          ACCESS_TOKEN_SECRET: ${{ secrets.ACCESS_TOKEN_SECRET }}
        run: |
          # === Write Python script line by line with echo ===
          echo "import tweepy, random" > post_complaint.py
          echo "" >> post_complaint.py
          echo "CONSUMER_KEY = '''$CONSUMER_KEY'''" >> post_complaint.py
          echo "CONSUMER_SECRET = '''$CONSUMER_SECRET'''" >> post_complaint.py
          echo "ACCESS_TOKEN = '''$ACCESS_TOKEN'''" >> post_complaint.py
          echo "ACCESS_TOKEN_SECRET = '''$ACCESS_TOKEN_SECRET'''" >> post_complaint.py
          echo "" >> post_complaint.py
          echo "if not all([CONSUMER_KEY.strip(), CONSUMER_SECRET.strip(), ACCESS_TOKEN.strip(), ACCESS_TOKEN_SECRET.strip()]):" >> post_complaint.py
          echo "    print('ERROR: Secrets missing')" >> post_complaint.py
          echo "    exit(1)" >> post_complaint.py
          echo "print('All secrets loaded')" >> post_complaint.py
          echo "" >> post_complaint.py
          echo "auth = tweepy.OAuth1UserHandler(CONSUMER_KEY, CONSUMER_SECRET, ACCESS_TOKEN, ACCESS_TOKEN_SECRET)" >> post_complaint.py
          echo "api = tweepy.API(auth)" >> post_complaint.py
          echo "user = api.verify_credentials()" >> post_complaint.py
          echo "print(f'Authenticated as @{user.screen_name}')" >> post_complaint.py
          echo "" >> post_complaint.py
          echo "complaints = [" >> post_complaint.py
          echo "    'Anonymous: The replicator gave me decaf AGAIN.'," >> post_complaint.py
          echo "    'Anonymous: Phaser on \"stun\" feels like a hug.'," >> post_complaint.py
          echo "    'Anonymous: Holodeck vacation â†’ Borg cube.'," >> post_complaint.py
          echo "    'Anonymous: Turbolift stopped on 47 decks.'," >> post_complaint.py
          echo "    'Anonymous: Counselor says I need therapy.'," >> post_complaint.py
          echo "    'Anonymous: Door squeaks. Engineering: \"It\'s ambiance.\"'," >> post_complaint.py
          echo "    'Anonymous: Replicated coffee tastes like warp coolant.'," >> post_complaint.py
          echo "    'Anonymous: Badge fell off during red alert.'," >> post_complaint.py
          echo "    'Anonymous: Captain\'s log: 99% dramatic pauses.'," >> post_complaint.py
          echo "    'Anonymous: Hypospray hurts more than the injury.'" >> post_complaint.py
          echo "]" >> post_complaint.py
          echo "" >> post_complaint.py
          echo "msg = random.choice(complaints)" >> post_complaint.py
          echo "api.update_status(msg)" >> post_complaint.py
          echo "print(f'POSTED: {msg}')" >> post_complaint.py

          # === Run it ===
          python post_complaint.py
