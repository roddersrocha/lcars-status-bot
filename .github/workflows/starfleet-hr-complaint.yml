name: Starfleet HR Complaint

on:
  schedule:
    - cron: '0 */4 * * *'
  workflow_dispatch:

jobs:
  post:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Tweepy
        run: pip install tweepy

      - name: Post Complaint
        env:
          CONSUMER_KEY: ${{ secrets.CONSUMER_KEY }}
          CONSUMER_SECRET: ${{ secrets.CONSUMER_SECRET }}
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          ACCESS_TOKEN_SECRET: ${{ secrets.ACCESS_TOKEN_SECRET }}
        run: |
          python - <<'EOF'
          import tweepy, random, os
          from datetime import datetime, timedelta, timezone

          # Load secrets
          ck = os.getenv('CONSUMER_KEY', '').strip()
          cs = os.getenv('CONSUMER_SECRET', '').strip()
          at = os.getenv('ACCESS_TOKEN', '').strip()
          ats = os.getenv('ACCESS_TOKEN_SECRET', '').strip()

          if not all([ck, cs, at, ats]):
              print("ERROR: One or more secrets missing or empty")
              exit(1)

          print("All secrets loaded")

          # OAuth 1.0a
          auth = tweepy.OAuth1UserHandler(ck, cs, at, ats)
          api = tweepy.API(auth)

          try:
              user = api.verify_credentials()
              print(f"Authenticated as @{user.screen_name}")
          except Exception as e:
              print(f"Auth failed: {e}")
              exit(1)

          # Complaints
          complaints = [
              "Anonymous: The replicator gave me decaf AGAIN.",
              "Anonymous: Phaser on 'stun' feels like 'gentle nudge'.",
              "Anonymous: Holodeck vacation → Klingon bloodwine brawl.",
              "Anonymous: Turbolift stopped on 47 decks. In a row.",
              "Anonymous: Counselor says I'm 'projecting'. I'm just tired.",
              "Anonymous: Door squeaks. Engineering: 'It's a feature.'",
              "Anonymous: Replicated tea tastes like warp coolant.",
              "Anonymous: Badge fell off during red alert. Again.",
              "Anonymous: Captain's log is 90% dramatic pauses.",
              "Anonymous: Hypospray hurts more than the phaser burn."
          ]

          # 17-hour check
          should_post = True
          try:
              tweets = api.user_timeline(count=1)
              if tweets:
                  last = tweets[0].created_at.replace(tzinfo=timezone.utc)
                  hours = (datetime.now(timezone.utc) - last).total_seconds() / 3600
                  if hours < 17:
                      should_post = False
                      print(f"Last post {hours:.1f}h ago → skipping")
                  else:
                      print(f"Last post {hours:.1f}h ago → posting")
              else:
                  print("First tweet → posting")
          except Exception as e:
              print(f"Timeline check failed: {e} → posting anyway")

          # Post
          if should_post:
              msg = random.choice(complaints)
              try:
                  api.update_status(msg)
                  print(f"POSTED: {msg}")
              except Exception as e:
                  print(f"Post failed: {e}")
          else:
              print("Post skipped")
          EOF
