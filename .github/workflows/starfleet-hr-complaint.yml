name: Starfleet HR Complaint

on:
  schedule:
    - cron: '0 */4 * * *'     # Runs every 4 hours
  workflow_dispatch:

jobs:
  post:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Tweepy
        run: pip install tweepy

      - name: Inject Secrets & Run
        env:
          CONSUMER_KEY: ${{ secrets.CONSUMER_KEY }}
          CONSUMER_SECRET: ${{ secrets.CONSUMER_SECRET }}
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          ACCESS_TOKEN_SECRET: ${{ secrets.ACCESS_TOKEN_SECRET }}
        run: |
          export CONSUMER_KEY="$CONSUMER_KEY"
          export CONSUMER_SECRET="$CONSUMER_SECRET"
          export ACCESS_TOKEN="$ACCESS_TOKEN"
          export ACCESS_TOKEN_SECRET="$ACCESS_TOKEN_SECRET"

          cat > post_complaint.py << 'PY'
          import tweepy, random
          from datetime import datetime, timezone

          # === Load secrets ===
          import os
          ck = os.getenv('CONSUMER_KEY', '').strip()
          cs = os.getenv('CONSUMER_SECRET', '').strip()
          at = os.getenv('ACCESS_TOKEN', '').strip()
          ats = os.getenv('ACCESS_TOKEN_SECRET', '').strip()

          if not all([ck, cs, at, ats]):
              print("ERROR: One or more secrets are missing or empty")
              exit(1)

          print("All secrets loaded")

          # === OAuth 1.0a ===
          auth = tweepy.OAuth1UserHandler(ck, cs, at, ats)
          api = tweepy.API(auth)

          try:
              user = api.verify_credentials()
              print(f"Authenticated as @{user.screen_name}")
          except Exception as e:
              print(f"Auth failed: {e}")
              exit(1)

          # === Starfleet HR Complaints ===
          complaints = [
              "Anonymous: The replicator gave me decaf AGAIN.",
              "Anonymous: Phaser on 'stun' feels like a gentle breeze.",
              "Anonymous: Holodeck vacation â†’ Borg assimilation.",
              "Anonymous: Turbolift stopped on 47 decks.",
              "Anonymous: Counselor says I need 'emotional recalibration'.",
              "Anonymous: Door squeaks. Engineering: 'It's ambiance.'",
              "Anonymous: Replicated coffee tastes like warp plasma.",
              "Anonymous: Badge fell off during red alert.",
              "Anonymous: Captain's log: 99% dramatic pauses.",
              "Anonymous: Hypospray hurts more than the injury."
          ]

          # === POST IMMEDIATELY (NO 17-HOUR WAIT) ===
          msg = random.choice(complaints)
          try:
              api.update_status(msg)
              print(f"POSTED: {msg}")
          except Exception as e:
              print(f"Post failed: {e}")
          PY

          sed -i "s|PLACEHOLDER_CONSUMER_KEY|$CONSUMER_KEY|g" post_complaint.py 2>/dev/null || true
          sed -i "s|PLACEHOLDER_CONSUMER_SECRET|$CONSUMER_SECRET|g" post_complaint.py 2>/dev/null || true
          sed -i "s|PLACEHOLDER_ACCESS_TOKEN|$ACCESS_TOKEN|g" post_complaint.py 2>/dev/null || true
          sed -i "s|PLACEHOLDER_ACCESS_TOKEN_SECRET|$ACCESS_TOKEN_SECRET|g" post_complaint.py 2>/dev/null || true

          python post_complaint.py
